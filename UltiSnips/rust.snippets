#######################################################################
#                            Rust Snippets                            #
#######################################################################

priority 1

# example from shipped rust.snippets
# snippet fn "fn name(?) -> ? {}"
# fn ${1:function_name}($2)${3/..*/ -> /}$3 {
# 	${VISUAL}$0
# }
# endsnippet

snippet new "Constructor function"
pub fn new(${2}) -> ${1:Self} {
	$1 { ${3} }
}
endsnippet

snippet let "let variable declaration with explicit type annotation"
let ${1}: ${2} = ${3};
endsnippet

snippet lem "let mut variable declaration with type inference"
let mut ${1} = ${2};
endsnippet

snippet dbg "dbg! debugging macro"
dbg!(${0:${VISUAL}})
endsnippet

# Testing
snippet ast "assert!"
assert!(${1:predicate});
endsnippet

snippet ase "assert_eq!"
assert_eq!(${1:expected}, ${2:actual});
endsnippet

snippet test "Unit test function"
#[test]
fn ${1:function_name}_test() {
	${0}
}
endsnippet

snippet testmod "Test module" b
#[cfg(test)]
mod tests {
	use super::${1:*};

	test${0}
}
endsnippet

# Common types
snippet opt "Option<T>"
Option<${1:i32}>
endsnippet

snippet res "Result<T, E>"
Result<${1:&str}, ${2:()}>
endsnippet

# Control structures
snippet if
if ${1} {
	${0:${VISUAL}}
}
endsnippet

snippet ife "if / else"
if ${1} {
	${2:${VISUAL}}
} else {
	${0}
}
endsnippet

snippet ifl "if let (...)"
if let ${1:Some($2)} = $3 {
	${0:${VISUAL}}
}
endsnippet

snippet el "else"
else {
	${0:${VISUAL}}
}
endsnippet

snippet eli "else if"
else if ${1} {
	${0:${VISUAL}}
}
endsnippet

snippet mat "match pattern"
match ${1} {
	${2} => ${3}
}
endsnippet

snippet case "Case clause of pattern match"
${1:_} => ${2:expression}
endsnippet

snippet loop "loop {}" b
loop {
	${0:${VISUAL}}
}
endsnippet

snippet wh "while loop"
while ${1:condition} {
	${0:${VISUAL}}
}
endsnippet

snippet whl "while let (...)"
while let ${1:Some($2)} = $3 {
	${0:${VISUAL}}
}
endsnippet

snippet for "for ... in ... loop"
for ${1:i} in ${2} {
	${0}
}
endsnippet

# Struct
snippet st "Struct definition"
struct ${1:`substitute(vim_snippets#Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`} {
	${0},
}

impl $1 {
}
endsnippet

snippet impl "Struct/Trait implementation"
impl ${1:Type/Trait}${2: for $3} {
	${0}
}
endsnippet

snippet stn "Struct with new constructor"
pub struct ${1:`substitute(vim_snippets#Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`} {
	${0}
}

impl $1 {
	pub fn new(${4}) -> Self {
		$1 { ${5} }
	}
}
endsnippet

# Concurrency
snippet spawn "spawn a thread"
thread::spawn(${1:move }|| {
	${0}
	});
endsnippet

snippet chan "Declare (Sender, Receiver) pair of asynchronous channel()"
let (${1:tx}, ${2:rx}): (Sender<${3:i32}>, Receiver<${4:i32}>) = channel();
endsnippet

snippet || "Closure, anonymous function (inline)" i
${1:move }|$2| { $3 }
endsnippet

snippet box "Box::new()"
Box::new(${0:${VISUAL}})
endsnippet

snippet rc "Rc::new()"
Rc::new(${0:${VISUAL}})
endsnippet

