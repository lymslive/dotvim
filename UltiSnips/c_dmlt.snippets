###########################################################################
#                            DMLT C   Snippets                            #
###########################################################################

# see shiped snips:
# ~/.vim/bundle/vim-snippets/UltiSnips/c.snippets

snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
	rand = '_'
	snip.rv = ('%s_%s' % (name,rand)).upper()
else:
	snip.rv = snip.c`}
#define $1

${VISUAL}${0}

#endif /* end of include guard: $1 */
endsnippet

snippet for "for loop (for)"
for (${2:i} = 0; $2 < ${1:count}; ${3:++$2})
{
	${VISUAL}${0}
}
endsnippet

snippet fori "for int loop (fori)"
for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++$2})
{
	${VISUAL}${0}
}
endsnippet

snippet forj "for int loop (fori)"
for (${4:int} ${2:j} = 0; $2 < ${1:count}; ${3:++$2})
{
	${VISUAL}${0}
}
endsnippet

snippet while "while (..)"
while (${1:/* condition */})
{
	${VISUAL}${0}
}
endsnippet

snippet whilei "while (..)"
while (${1:/* condition */}) ${VISUAL}${0}
endsnippet

snippet if "if (..)"
if (${1:/* condition */})
{
	${VISUAL}${0}
}
endsnippet

snippet ifi "if (..) inline"
if (${1:/* condition */}) ${VISUAL}${0}
endsnippet

snippet ie "if .. else"
if (${1:/* condition */})
{
	${VISUAL}${2}
}
else if (${3:/* condition */})
{
	${0}
}
endsnippet

snippet eli "else if .. (eli)"
else if (${1:/* condition */})
{
	${VISUAL}${0}
}
endsnippet

snippet log "LOG_ERR (as printf)"
LOG_ERR("${1:%s}"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`}
{
	${0:/* data */}
};
endsnippet

snippet em "enum"
enum ${1:ENUM}
{
	${2:ZERO = 0, }
	${3:ONE = 1, }
};
endsnippet

snippet fun "function" b
${1:int} ${2:function_name}(${3})
{
	${VISUAL}${0}
	return OK;
}
endsnippet

snippet fund "function declaration" b
${1:int} ${2:function_name}(${3});
endsnippet

snippet iRet
stResBody.Result.Ret${0}
endsnippet

# vim:ft=snippets:
